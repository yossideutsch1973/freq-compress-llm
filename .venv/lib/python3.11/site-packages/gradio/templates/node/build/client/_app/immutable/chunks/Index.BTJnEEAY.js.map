{"version":3,"mappings":"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","names":["ctx","insert_hydration","target","div","anchor","Undo","create_if_block_2","Download","attr","a","a_download_value","dirty","iconbutton_changes","current","File","create_if_block","loadCanvas3D","__vitePreload","loadCanvas3DGS","value","$$props","display_mode","clear_color","label","show_label","i18n","zoom_speed","pan_speed","camera_position","has_change_history","current_settings","use_3dgs","Canvas3DGSComponent","Canvas3DComponent","canvas3d","handle_undo","resolved_url","$$value","component","dequal","$$invalidate","upload_1_changes","blocklabel_changes","root","max_file_size","uploading","upload","stream_handler","handle_upload","detail","tick","dispatch","handle_clear","createEventDispatcher","dragging","block_changes","uploadtext_changes","model3dupload_changes","model3d_changes","elem_id","elem_classes","visible","loading_status","container","scale","min_width","gradio","height","input_ready","interactive","is_browser","clear_status_handler","clear_status_handler_1","func","args","func_1"],"ignoreList":[],"sources":["../../../../../../../model3D/shared/Model3D.svelte","../../../../../../../model3D/shared/Model3DUpload.svelte","../../../../../../../model3D/Index.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport type { FileData } from \"@gradio/client\";\n\timport { BlockLabel, IconButton, IconButtonWrapper } from \"@gradio/atoms\";\n\timport { File, Download, Undo } from \"@gradio/icons\";\n\timport type { I18nFormatter } from \"@gradio/utils\";\n\timport { dequal } from \"dequal\";\n\timport type Canvas3DGS from \"./Canvas3DGS.svelte\";\n\timport type Canvas3D from \"./Canvas3D.svelte\";\n\n\texport let value: FileData | null;\n\texport let display_mode: \"solid\" | \"point_cloud\" | \"wireframe\" = \"solid\";\n\texport let clear_color: [number, number, number, number] = [0, 0, 0, 0];\n\texport let label = \"\";\n\texport let show_label: boolean;\n\texport let i18n: I18nFormatter;\n\texport let zoom_speed = 1;\n\texport let pan_speed = 1;\n\t// alpha, beta, radius\n\texport let camera_position: [number | null, number | null, number | null] = [\n\t\tnull,\n\t\tnull,\n\t\tnull\n\t];\n\texport let has_change_history = false;\n\n\tlet current_settings = { camera_position, zoom_speed, pan_speed };\n\n\tlet use_3dgs = false;\n\tlet Canvas3DGSComponent: typeof Canvas3DGS;\n\tlet Canvas3DComponent: typeof Canvas3D;\n\tasync function loadCanvas3D(): Promise<typeof Canvas3D> {\n\t\tconst module = await import(\"./Canvas3D.svelte\");\n\t\treturn module.default;\n\t}\n\tasync function loadCanvas3DGS(): Promise<typeof Canvas3DGS> {\n\t\tconst module = await import(\"./Canvas3DGS.svelte\");\n\t\treturn module.default;\n\t}\n\t$: if (value) {\n\t\tuse_3dgs = value.path.endsWith(\".splat\") || value.path.endsWith(\".ply\");\n\t\tif (use_3dgs) {\n\t\t\tloadCanvas3DGS().then((component) => {\n\t\t\t\tCanvas3DGSComponent = component;\n\t\t\t});\n\t\t} else {\n\t\t\tloadCanvas3D().then((component) => {\n\t\t\t\tCanvas3DComponent = component;\n\t\t\t});\n\t\t}\n\t}\n\n\tlet canvas3d: Canvas3D | undefined;\n\tfunction handle_undo(): void {\n\t\tcanvas3d?.reset_camera_position();\n\t}\n\n\t$: {\n\t\tif (\n\t\t\t!dequal(current_settings.camera_position, camera_position) ||\n\t\t\tcurrent_settings.zoom_speed !== zoom_speed ||\n\t\t\tcurrent_settings.pan_speed !== pan_speed\n\t\t) {\n\t\t\tcanvas3d?.update_camera(camera_position, zoom_speed, pan_speed);\n\t\t\tcurrent_settings = { camera_position, zoom_speed, pan_speed };\n\t\t}\n\t}\n\n\tlet resolved_url: string | undefined;\n</script>\n\n<BlockLabel\n\t{show_label}\n\tIcon={File}\n\tlabel={label || i18n(\"3D_model.3d_model\")}\n/>\n{#if value}\n\t<div class=\"model3D\" data-testid=\"model3d\">\n\t\t<IconButtonWrapper>\n\t\t\t{#if !use_3dgs}\n\t\t\t\t<!-- Canvas3DGS doesn't implement the undo method (reset_camera_position) -->\n\t\t\t\t<IconButton\n\t\t\t\t\tIcon={Undo}\n\t\t\t\t\tlabel=\"Undo\"\n\t\t\t\t\ton:click={() => handle_undo()}\n\t\t\t\t\tdisabled={!has_change_history}\n\t\t\t\t/>\n\t\t\t{/if}\n\t\t\t<a\n\t\t\t\thref={resolved_url}\n\t\t\t\ttarget={window.__is_colab__ ? \"_blank\" : null}\n\t\t\t\tdownload={window.__is_colab__ ? null : value.orig_name || value.path}\n\t\t\t>\n\t\t\t\t<IconButton Icon={Download} label={i18n(\"common.download\")} />\n\t\t\t</a>\n\t\t</IconButtonWrapper>\n\n\t\t{#if use_3dgs}\n\t\t\t<svelte:component\n\t\t\t\tthis={Canvas3DGSComponent}\n\t\t\t\tbind:resolved_url\n\t\t\t\t{value}\n\t\t\t\t{zoom_speed}\n\t\t\t\t{pan_speed}\n\t\t\t/>\n\t\t{:else}\n\t\t\t<svelte:component\n\t\t\t\tthis={Canvas3DComponent}\n\t\t\t\tbind:this={canvas3d}\n\t\t\t\tbind:resolved_url\n\t\t\t\t{value}\n\t\t\t\t{display_mode}\n\t\t\t\t{clear_color}\n\t\t\t\t{camera_position}\n\t\t\t\t{zoom_speed}\n\t\t\t\t{pan_speed}\n\t\t\t/>\n\t\t{/if}\n\t</div>\n{/if}\n\n<style>\n\t.model3D {\n\t\tdisplay: flex;\n\t\tposition: relative;\n\t\twidth: var(--size-full);\n\t\theight: var(--size-full);\n\t\tborder-radius: var(--block-radius);\n\t\toverflow: hidden;\n\t}\n\t.model3D :global(canvas) {\n\t\twidth: var(--size-full);\n\t\theight: var(--size-full);\n\t\tobject-fit: contain;\n\t\toverflow: hidden;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { createEventDispatcher, tick } from \"svelte\";\n\timport { Upload, ModifyUpload } from \"@gradio/upload\";\n\timport type { FileData, Client } from \"@gradio/client\";\n\timport { BlockLabel } from \"@gradio/atoms\";\n\timport { File } from \"@gradio/icons\";\n\timport type { I18nFormatter } from \"@gradio/utils\";\n\timport type Canvas3DGS from \"./Canvas3DGS.svelte\";\n\timport type Canvas3D from \"./Canvas3D.svelte\";\n\n\texport let value: null | FileData;\n\texport let display_mode: \"solid\" | \"point_cloud\" | \"wireframe\" = \"solid\";\n\texport let clear_color: [number, number, number, number] = [0, 0, 0, 0];\n\texport let label = \"\";\n\texport let show_label: boolean;\n\texport let root: string;\n\texport let i18n: I18nFormatter;\n\texport let zoom_speed = 1;\n\texport let pan_speed = 1;\n\texport let max_file_size: number | null = null;\n\texport let uploading = false;\n\n\t// alpha, beta, radius\n\texport let camera_position: [number | null, number | null, number | null] = [\n\t\tnull,\n\t\tnull,\n\t\tnull\n\t];\n\texport let upload: Client[\"upload\"];\n\texport let stream_handler: Client[\"stream\"];\n\n\tasync function handle_upload({\n\t\tdetail\n\t}: CustomEvent<FileData>): Promise<void> {\n\t\tvalue = detail;\n\t\tawait tick();\n\t\tdispatch(\"change\", value);\n\t\tdispatch(\"load\", value);\n\t}\n\n\tasync function handle_clear(): Promise<void> {\n\t\tvalue = null;\n\t\tawait tick();\n\t\tdispatch(\"clear\");\n\t\tdispatch(\"change\");\n\t}\n\n\tlet use_3dgs = false;\n\tlet Canvas3DGSComponent: typeof Canvas3DGS;\n\tlet Canvas3DComponent: typeof Canvas3D;\n\tasync function loadCanvas3D(): Promise<typeof Canvas3D> {\n\t\tconst module = await import(\"./Canvas3D.svelte\");\n\t\treturn module.default;\n\t}\n\tasync function loadCanvas3DGS(): Promise<typeof Canvas3DGS> {\n\t\tconst module = await import(\"./Canvas3DGS.svelte\");\n\t\treturn module.default;\n\t}\n\t$: if (value) {\n\t\tuse_3dgs = value.path.endsWith(\".splat\") || value.path.endsWith(\".ply\");\n\t\tif (use_3dgs) {\n\t\t\tloadCanvas3DGS().then((component) => {\n\t\t\t\tCanvas3DGSComponent = component;\n\t\t\t});\n\t\t} else {\n\t\t\tloadCanvas3D().then((component) => {\n\t\t\t\tCanvas3DComponent = component;\n\t\t\t});\n\t\t}\n\t}\n\n\tlet canvas3d: Canvas3D | undefined;\n\tasync function handle_undo(): Promise<void> {\n\t\tcanvas3d?.reset_camera_position();\n\t}\n\n\tconst dispatch = createEventDispatcher<{\n\t\tchange: FileData | null;\n\t\tclear: undefined;\n\t\tdrag: boolean;\n\t\tload: FileData;\n\t}>();\n\n\tlet dragging = false;\n\n\t$: dispatch(\"drag\", dragging);\n</script>\n\n<BlockLabel {show_label} Icon={File} label={label || \"3D Model\"} />\n\n{#if value === null}\n\t<Upload\n\t\t{upload}\n\t\t{stream_handler}\n\t\ton:load={handle_upload}\n\t\t{root}\n\t\t{max_file_size}\n\t\tfiletype={[\".stl\", \".obj\", \".gltf\", \".glb\", \"model/obj\", \".splat\", \".ply\"]}\n\t\tbind:dragging\n\t\tbind:uploading\n\t\ton:error\n\t\taria_label={i18n(\"model3d.drop_to_upload\")}\n\t>\n\t\t<slot />\n\t</Upload>\n{:else}\n\t<div class=\"input-model\">\n\t\t<ModifyUpload\n\t\t\tundoable={!use_3dgs}\n\t\t\ton:clear={handle_clear}\n\t\t\t{i18n}\n\t\t\ton:undo={handle_undo}\n\t\t/>\n\n\t\t{#if use_3dgs}\n\t\t\t<svelte:component\n\t\t\t\tthis={Canvas3DGSComponent}\n\t\t\t\t{value}\n\t\t\t\t{zoom_speed}\n\t\t\t\t{pan_speed}\n\t\t\t/>\n\t\t{:else}\n\t\t\t<svelte:component\n\t\t\t\tthis={Canvas3DComponent}\n\t\t\t\tbind:this={canvas3d}\n\t\t\t\t{value}\n\t\t\t\t{display_mode}\n\t\t\t\t{clear_color}\n\t\t\t\t{camera_position}\n\t\t\t\t{zoom_speed}\n\t\t\t\t{pan_speed}\n\t\t\t/>\n\t\t{/if}\n\t</div>\n{/if}\n\n<style>\n\t.input-model {\n\t\tdisplay: flex;\n\t\tposition: relative;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\twidth: var(--size-full);\n\t\theight: var(--size-full);\n\t\tborder-radius: var(--block-radius);\n\t\toverflow: hidden;\n\t}\n\n\t.input-model :global(canvas) {\n\t\twidth: var(--size-full);\n\t\theight: var(--size-full);\n\t\tobject-fit: contain;\n\t\toverflow: hidden;\n\t}\n</style>\n","<script context=\"module\" lang=\"ts\">\n\texport { default as BaseModel3D } from \"./shared/Model3D.svelte\";\n\texport { default as BaseModel3DUpload } from \"./shared/Model3DUpload.svelte\";\n\texport { default as BaseExample } from \"./Example.svelte\";\n</script>\n\n<script lang=\"ts\">\n\timport type { FileData } from \"@gradio/client\";\n\timport Model3D from \"./shared/Model3D.svelte\";\n\timport Model3DUpload from \"./shared/Model3DUpload.svelte\";\n\timport { BlockLabel, Block, Empty, UploadText } from \"@gradio/atoms\";\n\timport { File } from \"@gradio/icons\";\n\n\timport { StatusTracker } from \"@gradio/statustracker\";\n\timport type { LoadingStatus } from \"@gradio/statustracker\";\n\timport type { Gradio } from \"@gradio/utils\";\n\n\texport let elem_id = \"\";\n\texport let elem_classes: string[] = [];\n\texport let visible = true;\n\texport let value: null | FileData = null;\n\texport let root: string;\n\texport let display_mode: \"solid\" | \"point_cloud\" | \"wireframe\" = \"solid\";\n\texport let clear_color: [number, number, number, number];\n\texport let loading_status: LoadingStatus;\n\texport let label: string;\n\texport let show_label: boolean;\n\texport let container = true;\n\texport let scale: number | null = null;\n\texport let min_width: number | undefined = undefined;\n\texport let gradio: Gradio;\n\texport let height: number | undefined = undefined;\n\texport let zoom_speed = 1;\n\texport let input_ready: boolean;\n\tlet uploading = false;\n\t$: input_ready = !uploading;\n\texport let has_change_history = false;\n\n\t// alpha, beta, radius\n\texport let camera_position: [number | null, number | null, number | null] = [\n\t\tnull,\n\t\tnull,\n\t\tnull\n\t];\n\texport let interactive: boolean;\n\n\tlet dragging = false;\n\tconst is_browser = typeof window !== \"undefined\";\n</script>\n\n{#if !interactive}\n\t<Block\n\t\t{visible}\n\t\tvariant={value === null ? \"dashed\" : \"solid\"}\n\t\tborder_mode={dragging ? \"focus\" : \"base\"}\n\t\tpadding={false}\n\t\t{elem_id}\n\t\t{elem_classes}\n\t\t{container}\n\t\t{scale}\n\t\t{min_width}\n\t\t{height}\n\t>\n\t\t<StatusTracker\n\t\t\tautoscroll={gradio.autoscroll}\n\t\t\ti18n={gradio.i18n}\n\t\t\t{...loading_status}\n\t\t\ton:clear_status={() => gradio.dispatch(\"clear_status\", loading_status)}\n\t\t/>\n\n\t\t{#if value && is_browser}\n\t\t\t<Model3D\n\t\t\t\t{value}\n\t\t\t\ti18n={gradio.i18n}\n\t\t\t\t{display_mode}\n\t\t\t\t{clear_color}\n\t\t\t\t{label}\n\t\t\t\t{show_label}\n\t\t\t\t{camera_position}\n\t\t\t\t{zoom_speed}\n\t\t\t\t{has_change_history}\n\t\t\t/>\n\t\t{:else}\n\t\t\t<!-- Not ideal but some bugs to work out before we can \n\t\t\t\t make this consistent with other components -->\n\n\t\t\t<BlockLabel {show_label} Icon={File} label={label || \"3D Model\"} />\n\n\t\t\t<Empty unpadded_box={true} size=\"large\"><File /></Empty>\n\t\t{/if}\n\t</Block>\n{:else}\n\t<Block\n\t\t{visible}\n\t\tvariant={value === null ? \"dashed\" : \"solid\"}\n\t\tborder_mode={dragging ? \"focus\" : \"base\"}\n\t\tpadding={false}\n\t\t{elem_id}\n\t\t{elem_classes}\n\t\t{container}\n\t\t{scale}\n\t\t{min_width}\n\t\t{height}\n\t>\n\t\t<StatusTracker\n\t\t\tautoscroll={gradio.autoscroll}\n\t\t\ti18n={gradio.i18n}\n\t\t\t{...loading_status}\n\t\t\ton:clear_status={() => gradio.dispatch(\"clear_status\", loading_status)}\n\t\t/>\n\n\t\t<Model3DUpload\n\t\t\t{label}\n\t\t\t{show_label}\n\t\t\t{root}\n\t\t\t{display_mode}\n\t\t\t{clear_color}\n\t\t\t{value}\n\t\t\t{camera_position}\n\t\t\t{zoom_speed}\n\t\t\tbind:uploading\n\t\t\ton:change={({ detail }) => (value = detail)}\n\t\t\ton:drag={({ detail }) => (dragging = detail)}\n\t\t\ton:change={({ detail }) => {\n\t\t\t\tgradio.dispatch(\"change\", detail);\n\t\t\t\thas_change_history = true;\n\t\t\t}}\n\t\t\ton:clear={() => {\n\t\t\t\tvalue = null;\n\t\t\t\tgradio.dispatch(\"clear\");\n\t\t\t}}\n\t\t\ton:load={({ detail }) => {\n\t\t\t\tvalue = detail;\n\t\t\t\tgradio.dispatch(\"upload\");\n\t\t\t}}\n\t\t\ton:error={({ detail }) => {\n\t\t\t\tloading_status = loading_status || {};\n\t\t\t\tloading_status.status = \"error\";\n\t\t\t\tgradio.dispatch(\"error\", detail);\n\t\t\t}}\n\t\t\ti18n={gradio.i18n}\n\t\t\tmax_file_size={gradio.max_file_size}\n\t\t\tupload={(...args) => gradio.client.upload(...args)}\n\t\t\tstream_handler={(...args) => gradio.client.stream(...args)}\n\t\t>\n\t\t\t<UploadText i18n={gradio.i18n} type=\"file\" />\n\t\t</Model3DUpload>\n\t</Block>\n{/if}\n"],"file":"_app/immutable/chunks/Index.BTJnEEAY.js"}